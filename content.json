[{"title":"js判断数据是否为数组类型","date":"2017-04-19T15:43:05.000Z","path":"2017/04/19/is-array/","text":"1.instanceof12var a=[];console.log(a instanceof Array) //输出true 2.原型链方法constructor123var arr=[1,2,3]console.log(arr.constructor==Array) //输出为trueconsole.log(arr.__proto__.constructor==Array) //和上面一样，输出为true 注意： (1) __proto__在低版本IE中是没有定义的 (2) instanceof 和constructor 判断的变量，必须在当前页面声明的，比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false 原因： (1) array属于引用型数据，在传递过程中，仅仅是引用地址的传递 (2) 每个页面的Array原生对象所引用的地址是不一样的，在子页面声明的array，所对应的构造函数，是子页面的Array对象；父页面来进行判断，使用的Array并不等于子页面的Array 3.通用方法12345var arr = [12,3,5]function isArray(o)&#123; return Object.prototype.toString.call(o)==&apos;[object Array]&apos;;&#125;console.log(isArray(arr)) //true 4.ES5定义了方法Array.isArray()来判断1Array.isArray([]); //true 比较新，有些浏览器不支持","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"水平居中和垂直居中","date":"2017-04-18T14:02:34.862Z","path":"2017/04/18/center/","text":"html页面结构如下，仅讨论块状元素的居中问题，div的父元素为body，改成其他元素同理12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;mydiv&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; DIV仅水平居中让一个DIV水平居中，直接用CSS就可以做到。 为了让div能够看到，我们需要为其设置颜色和高度才能在页面可见，宽度如果不设置默认是继承父元素的宽度 只要设置了DIV的宽度，然后使用margin设置边距0 auto或者auto，CSS自动算出左右边距，使得DIV居中。123456#mydiv&#123; margin:0 auto; width:400px; height:200px; background:#ccc;&#125; 水平居中效果如下： DIV水平和垂直都居中 绝对定位法 1234567891011#mydiv&#123; width:400px; height:200px; background:#ccc; position:absolute; margin:auto; left:0; right:0; top:0; bottom:0;&#125; 负边距补全法此法要让DIV水平和垂直居中，必需知道该DIV的宽度和高度，然后设置定位为绝对定位，距离页面窗口左边框和上边框的距离设置为50%，这个50%就是指页面窗口的宽度和高度的50%，最后将该DIV分别左移和上移，左移和上移的大小就是该DIV宽度和高度的一半。 123456789#mydiv&#123; position:absolute; width:400px; height:200px; background:#ccc; left:50%; top:50%; margin:-100px 0 0 -200px;&#125; 注意：这儿的负边距补充也可以使用css3的transform属性实现：123456789#mydiv&#123; position:absolute; width:400px; height:200px; background:#ccc; left:50%; top:50%; transform:translate(-50%,-50%);&#125; 1,2的效果如下：","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"布局","slug":"布局","permalink":"http://yoursite.com/tags/布局/"}]},{"title":"ssh-key git多账户配置","date":"2017-04-18T13:40:06.722Z","path":"2017/04/18/ssh key-gen/","text":"场景：在使用git的时候，一般我们使用的远程Git服务器是github，这时只需简单的生成ssh-key密钥对并将公钥添加到github中就可以使用ssh了。 但在公司开发使用内部的git时，一般在gitlab,使用的邮箱一般是公司的邮箱，那么就需要配置多个ssh-key账户了。假设user使用github的邮箱为user1@163.com;user2使用gitlab的邮箱为user2@163.com,下面是配置过程： 首先进入用户主目录下的.ssh文件夹，我们生成的密钥对放在这儿1$ cd ~/.ssh 分别为user1和user2生成密钥对：默认三次回车生成key的名字为id_rsa，注意在生成第二个的时候不要使用默认名，否则会覆盖第一个，在以下位置为第二个输入名字12345#新建SSH key$ ssh-keygen -t rsa -C &quot;user1@163.com&quot;$ ssh-keygen -t rsa -C &quot;user2@163.com&quot;#设置user2的命名为id_rsa_work Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): id_rsa_work 此时在.ssh目录下就有两个密钥对文件id_rsa和id_rsa_work,我们将公钥分别拷至对应的Git服务器 添加key到SSH agent中:此时还无法使用第二个服务器，因为Git会默认只读取到id_rsa,为了让SSH识别新的私钥，需将其添加到SSH agent中：12$ ssh-add ~/.ssh/id_rsa$ ssh-add ~/.ssh/id_rsa_work 如果出现Could not open a connection to your authentication agent的错误，就试着用以下命令：123$ ssh-agent bash$ ssh-add ~/.ssh/id_rsa$ ssh-add ~/.ssh/id_rsa_work 成功会显示：1Identity added: /c/Users/Windows用户名/.ssh/key名 (/c/Users/Windows用户名/.ssh/key名) 注意：ssh-add 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 ssh-agent 所管理的一个 session 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，也就是说当你重启之后，ssh-agent 服务也就重置了。 创建并配置config文件使配置永久生效：在.ssh目录下新建一个文本文件，命令为config，不需要后缀，bash下可直接使用touch config,编辑以下内容： 12345678910111213# gitlab Host gitlab的IP HostName gitlab的Host //这里填你们公司的git网址即可 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_work User user2# github Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa User user1 其规则就是：从上至下读取config的内容，在每个Host下寻找对应的私钥。按照你的情况修改就可以。 使用：如果之前有设置全局用户名和邮箱的话，需要unset一下，可通过 $ git config --list来查看全局配置 12$ git config --global --unset user.name$ git config --global --unset user.email 可以在不同的仓库下设置局部的用户名和邮箱用不同的账号登录，比如在公司的repository下: 12$ git config user.name &quot;user2&quot; $ git config user.email &quot;user2@163.com&quot; 测试： 1234$ ssh -T git@github.com#输出：Hi user1! You&apos;ve successfully authenticated, but GitHub does not provide shell access.$ ssh -T git@gitlab的IP#输出：Hi user2@163.com**, this is git@..... 测试成功。如果出什么问题，可以通过ssh -vT git@github.com来输出编译信息，然后根据编译信息去解决问题","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"工作流","slug":"工作流","permalink":"http://yoursite.com/tags/工作流/"}]},{"title":"Hello World","date":"2017-04-13T13:26:34.908Z","path":"2017/04/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]